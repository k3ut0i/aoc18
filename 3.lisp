(eval-when (:compile-toplevel :load-toplevel :execute)
  (ql:quickload :split-sequence))
(use-package '(:split-sequence))

(defun part1 (file size)
  (with-open-file (s file)
    (let ((a (make-array (list size size)
			 :initial-element 0)))
      (loop
	 :for x = (read-line s nil nil)
	 :while (and x (not (string= x "")))
	 :do (destructuring-bind (cm-no (x-off y-off) (x-len y-len))
		 (read-claim x)
	       (declare (ignore cm-no))
	       (dotimes (x x-len)
		 (dotimes (y y-len)
		   (incf (aref a (+ x-off x) (+ y-off y)))))))
      (destructuring-bind (xdim ydim)
	  (array-dimensions a)
	(let ((count 0))
	  (dotimes (x xdim count)
	    (dotimes (y ydim)
	      (when (>= (aref a x y) 2)
		(incf count)))))))))

(defun part2 (file size)
  (with-open-file (s file)
    (let ((a (make-array (list size size)
			 :initial-element nil))
	  (claims nil))
      (loop
	 :for x = (read-line s nil nil)
	 :while (and x (not (string= x "")))
	 :do (destructuring-bind (cm-no (x-off y-off) (x-len y-len))
		 (read-claim x)
	       (push cm-no claims)
	       (dotimes (x x-len)
		 (dotimes (y y-len)
		   (push cm-no (aref a (+ x-off x) (+ y-off y)))))))
      (destructuring-bind (xdim ydim)
	  (array-dimensions a)
	(remove-if-not (lambda (claim)
			 (let ((okay t))
			   (dotimes (x xdim)
			     (dotimes (y ydim)
			       (let ((cell (aref a x y)))
				 (when (member claim cell)
				   (unless (= 1 (length cell))
				     (setq okay nil))))))
			   okay))
		       claims)))))

(defun read-claim (string)
  (let* ((vars (split-sequence #\Space string))
	 (claim-number (read-from-string (string-trim (list #\#) (car vars))))
	 (offsets (mapcar #'read-from-string
			  (split-sequence #\, (string-trim (list #\:) (caddr vars)))))
	 (dimensions (mapcar #'read-from-string
			     (split-sequence #\x (cadddr vars)))))
    (list claim-number offsets dimensions)))
